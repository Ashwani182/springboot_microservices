spring.application.name=notification-service

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.appname=notification-service
eureka.instance.hostname=localhost
server.port=0

#Zipkin sleuth properties (sleuth is for tracing the system)
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0
management.endpoints.web.exposure.include=prometheus
# management.tracing.sampling.probability=1.0 is to move all the transaction through zipkin
# traceID and spanId are predefined MDC keys - we want the logs to include them
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
#nned to prvide group id so we don't get error
spring.kafka.consumer.group-id=notificationId
# Deserializer of the object and string needs to provide
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#Kafka Properties this property to map the sending JSON object from the producer to consumer defining what class we are sending
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.springmsproject.notificationservice.OrderPlacedEvent


